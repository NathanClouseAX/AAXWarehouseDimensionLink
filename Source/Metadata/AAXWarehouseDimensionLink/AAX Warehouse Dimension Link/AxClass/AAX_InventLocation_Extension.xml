<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AAX_InventLocation_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(InventLocation))]
final class AAX_InventLocation_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>AAX_locationDimensionEquals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the dimension that is linked to site is the same as the dimension that is
    /// specified on the site.
    /// </summary>
    /// <param name="_dimension">
    /// The dimension to check.
    /// </param>
    /// <returns>
    /// true if the linked dimension attribute has the same value; otherwise, false.
    /// </returns>
    public boolean AAX_locationDimensionEquals(DimensionDefault _dimension)
    {
        DimensionAttributeValueSetStorage   valueSetStorage;
        RecId                               dimAttributeValue;

        valueSetStorage = DimensionAttributeValueSetStorage::find(_dimension);

        dimAttributeValue = valueSetStorage.getValueByDimensionAttribute(InventParameters::find().AAX_LocationDimensionAttribute);

        return (dimAttributeValue == this.AAX_dimensionAttributeValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>AAX_dimensionAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the dimension value for the site linked attribute.
    /// </summary>
    /// <returns>
    ///    The <c>RecId</c> value of the <c>DimensionAttributeValue</c> record that corresponds to the
    ///    attribute to which the site is linked.
    /// </returns>
    public RecId AAX_dimensionAttributeValue()
    {
        DimensionAttributeValueSetStorage   valueSetStorage;

        valueSetStorage = DimensionAttributeValueSetStorage::find(this.AAX_DefaultDimension);

        return valueSetStorage.getValueByDimensionAttribute(InventParameters::find().AAX_LocationDimensionAttribute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>AAX_useLocationLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to use the site link for the provided buffer.
    /// </summary>
    /// <param name="_common">
    /// A buffer to check.
    /// </param>
    /// <returns>
    /// true if the site link is enabled and can be used for the provided record; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method returns true if the site link is either locked or active.
    /// </remarks>
    public static boolean AAX_useLocationLink(Common _common)
    {
        SMAServiceOrderLine     smaServiceOrderLine;
        SMAAgreementLine        smaAgreementLine;
        TmpProjAdjustmentCreate tmpProjAdjustmentCreate;
        InventTransferLine      inventTransferLine;

        boolean                 uselocationLink;

        #ISOCountryRegionCodes

        // If the link is not inactive, site dimension link is used
        if (!InventParameters::find().AAX_isLocationDimensionLinkInactive())
        {
            useLocationLink = true;

            switch (_common.TableId)
            {
                case tableNum(BOMParmReportFinish):
                case tableNum(CustTable):
                case tableNum(ForecastPurch):
                case tableNum(ForecastSales):
                case tableNum(InventJournalTrans):
                case tableNum(InventNonConformanceTable):
                case tableNum(InventQualityOrderTable):
                case tableNum(InventQuarantineOrder):
                case tableNum(InventTable):
                case tableNum(Kanban):
                case tableNum(KanbanJob):
                case tableNum(KanbanJobPickingList):
                case tableNum(ProdBOM):
                case tableNum(ProdJournalBOM):
                case tableNum(ProdTable):
                case tableNum(PurchLine):
                case tableNum(PurchReqLine):
                case tableNum(PurchRFQCaseLine):
                case tableNum(PurchRFQCaseTable):
                case tableNum(PurchRFQLine):
                case tableNum(PurchRFQTable):
                case tableNum(PurchTable):
                case tableNum(SalesLine):
                case tableNum(SalesQuotationLine):
                case tableNum(SalesQuotationTable):
                case tableNum(SalesTable):
                case tableNum(TmpBOM):
                case tableNum(VendTable):
                    break;
                // some transactions use LocationLink depending on type
                case tableNum(SMAServiceOrderLine):
                    smaServiceOrderLine = _common;
                    if (smaServiceOrderLine.TransactionType != SMATransactionType::Item)
                    {
                        useLocationLink = false;
                    }
                    break;

                case tableNum(SMAAgreementLine):
                    smaAgreementLine = _common;
                    if (smaAgreementLine.TransactionType != SMATransactionType::Item)
                    {
                        useLocationLink = false;
                    }
                    break;

                case tableNum(TmpProjAdjustmentCreate):
                    tmpProjAdjustmentCreate = _common;
                    if (tmpProjAdjustmentCreate.AdjustmentType != ProjAdjustmentType::Item)
                    {
                        useLocationLink = false;
                    }
                    break;

                // <GIN>
                case tableNum(InventTransferLine):
                    if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                    {
                        useLocationLink = false;
                    }
                    else
                    {
                        inventTransferLine = _common;
                        if (inventTransferLine.inventTransferTable().TransferType_IN != TransferType_IN::StockTransfer)
                        {
                            useLocationLink = false;
                        }
                    }
                    break;
                // </GIN>

                default:
                    useLocationLink = false;
                    break;
            }
        }

        return useLocationLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>AAX_changeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// If site link is enabled, replaces the site linked dimension to match the site.
    /// </summary>
    /// <param name="_dimension">
    /// The dimension default value to change.
    /// </param>
    /// <param name="_inventSiteId">
    /// The site from which to default the dimension.
    /// </param>
    /// <returns>
    /// The resulting dimension.
    /// </returns>
    /// <remarks>
    /// If the site link is inactive, this method returns the dimension that was passed without any changes
    /// to it.
    /// </remarks>
    public static DimensionDefault AAX_changeDimension(DimensionDefault _dimension, InventLocationId _InventLocationId)
    {
        DimensionDefault    LocationDimension;
        InventParameters    InventParameters = InventParameters::find();

        if (InventParameters.AAX_isLocationDimensionLinkInactive())
        {
            return _dimension;
        }

        LocationDimension = InventLocation::find(_InventLocationId).AAX_DefaultDimension;

        return LedgerDimensionDefaultFacade::serviceReplaceAttributeValue(_dimension, LocationDimension, InventParameters.AAX_LocationDimensionAttribute);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>