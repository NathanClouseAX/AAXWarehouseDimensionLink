<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AAX_InventLocationDimensionLink_DimActive</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AAX_InventLocationDimensionLink_DimActive extends AAX_inventLocationDimensionLink
{
    InventParameters    InventParameters;
    DimensionDefaultMap     dimensionDefaultMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>axParmDefaultDimensionSet</Name>
				<Source><![CDATA[
    public void axParmDefaultDimensionSet(AxInventSiteDimensionable _AAX_AxInventLocationDimensionable, DimensionDefault _dimension)
    {
        DimensionDefault originalDimension = dimensionDefaultMap.DefaultDimension;

        DimensionDefault resultDimension = LedgerDimensionDefaultFacade::serviceReplaceAttributeValue(_dimension, originalDimension, InventParameters.AAX_LocationDimensionAttribute);

        _AAX_AxInventLocationDimensionable.setDefaultDimensionValue(resultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>axSetDefaultDimension</Name>
				<Source><![CDATA[
    public void axSetDefaultDimension(AxInventSiteDimensionable _AAX_AxInventLocationDimensionable, boolean _forceDefaultDimensionChanges = false)
    {
        DimensionDefault    resultDimension;
        DimensionDefault    siteDimension;

        boolean isSiteDimensionEmpty(DimensionDefault _dimension)
        {
            return (DimensionAttributeValueSetStorage::find(_dimension).getValueByDimensionAttribute(InventParameters.AAX_LocationDimensionAttribute) == 0);
        }

        _AAX_AxInventLocationDimensionable.setStorageDimField(inventLocationIdFieldId);

        if (_AAX_AxInventLocationDimensionable.isStorageDimFieldSet(inventLocationIdFieldId))
        {
            DimensionDefault originalDimension = dimensionDefaultMap.DefaultDimension;

            if (isSiteDimensionEmpty(originalDimension)
            || inventParameters.MultiSiteDimensionLink == InventMultiSiteDimensionLink::Locked
            || (_forceDefaultDimensionChanges && inventParameters.MultiSiteDimensionLink == InventMultiSiteDimensionLink::Active))
            {
                siteDimension = InventSite::find(storageDimTable.(inventLocationIdFieldId)).DefaultDimension;

                resultDimension = LedgerDimensionDefaultFacade::serviceReplaceAttributeValue(originalDimension, siteDimension, InventParameters.AAX_LocationDimensionAttribute);

                _AAX_AxInventLocationDimensionable.setDefaultDimensionValue(resultDimension);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkDimension</Name>
				<Source><![CDATA[
    public void linkDimension()
    {
        DimensionDefault    dimension = dimensionDefaultMap.DefaultDimension;
        dimensionDefaultMap.DefaultDimension = InventLocation::AAX_changeDimension(dimension, storageDimTable.(inventLocationIdFieldId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Common _common)
    {
        super();

        dimensionDefaultMap  = _common;

        inventParameters        = InventParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static AAX_InventLocationDimensionLink_DimActive construct(Common _common)
    {
        return new AAX_InventLocationDimensionLink_DimActive(_common);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    public static AAX_InventLocationDimensionLink_DimActive newStandard(Common _common)
    {
        return AAX_InventLocationDimensionLink_DimActive::construct(_common);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>