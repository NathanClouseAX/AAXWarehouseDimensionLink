<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AAX_InventSiteDimensionLinkValidationDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventSiteDimensionLinkValidationDP</c> class is the report data provider class for the site
///    dimension link validation  report.
/// </summary>
[SRSReportParameterAttribute(classStr(InventSiteDimLinkValidContract))]
public class AAX_InventSiteDimensionLinkValidationDP extends SRSReportDataProviderBase
{
    InventSiteDimensionLinkValidationTmp    inventSiteDimensionLinkValidationTmp;
    InventParameters                        inventParameters;
    InventDim                               inventDim;
    InventSite                              inventSite;
    DimensionValue                          transDimensionValue;

    boolean                                 listTransactions;
    Common                                  common;
    int64                                   recordCount;

}

]]></Declaration>
		<Methods>
			<Method>
				<Name>getInventSiteDimensionLinkValidationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets data from the <c>InventSiteDimensionLinkValidationTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>InventSiteDimensionLinkValidationTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(InventSiteDimensionLinkValidationTmp))]
    public InventSiteDimensionLinkValidationTmp getInventSiteDimensionLinkValidationTmp()
    {
        select * from inventSiteDimensionLinkValidationTmp;
        return inventSiteDimensionLinkValidationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertForecastPurch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts values from a record in the <c>ForecastPurch</c> table into a temporary table.
    /// </summary>
    /// <param name="_forecastPurch">
    ///    A record in the <c>ForecastPurch</c> table.
    /// </param>
    protected void insertForecastPurch(ForecastPurch _forecastPurch)
    {
        this.setCommonNonIssueTempTableRecordValues(tableNum(ForecastPurch));

        inventSiteDimensionLinkValidationTmp.fpfsModelId                    = _forecastPurch.ModelId;
        inventSiteDimensionLinkValidationTmp.fpfsItemId                     = _forecastPurch.ItemId;
        inventSiteDimensionLinkValidationTmp.fpfsStartDate                  = _forecastPurch.StartDate;
        inventSiteDimensionLinkValidationTmp.fpPurchQuantity                = _forecastPurch.PurchQty;
        inventSiteDimensionLinkValidationTmp.fpfspbsmasolPurchSalesUnitId   = _forecastPurch.PurchUnitId;
        inventSiteDimensionLinkValidationTmp.fpplprfqclPurchPrice           = _forecastPurch.PurchPrice;
        inventSiteDimensionLinkValidationTmp.fpfsDiscAmount                 = _forecastPurch.DiscAmount;
        inventSiteDimensionLinkValidationTmp.fpfsAmount                     = _forecastPurch.Amount;
        inventSiteDimensionLinkValidationTmp.fpfsAllocateMethod             = _forecastPurch.AllocateMethod;
        inventSiteDimensionLinkValidationTmp.fpfsFreq                       = _forecastPurch.Freq;
        inventSiteDimensionLinkValidationTmp.fpfsFreqCode                   = _forecastPurch.FreqCode;
        inventSiteDimensionLinkValidationTmp.fpfsEndDate                    = _forecastPurch.EndDate;
        inventSiteDimensionLinkValidationTmp.fpfsKeyId                      = _forecastPurch.KeyId;
        inventSiteDimensionLinkValidationTmp.fpfsItemAllocateId             = _forecastPurch.ItemAllocateId;
        inventSiteDimensionLinkValidationTmp.fpVendAccountId                = _forecastPurch.VendAccountId;
        inventSiteDimensionLinkValidationTmp.fpVendGroupId                  = _forecastPurch.VendGroupId;

        inventSiteDimensionLinkValidationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertForecastSales</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts values from a record in the <c>ForecastSales</c> table into a temporary table.
    /// </summary>
    /// <param name="_forecastSales">
    ///    A record in the <c>ForecastSales</c> table.
    /// </param>
    protected void insertForecastSales(ForecastSales _forecastSales)
    {
        this.setCommonNonIssueTempTableRecordValues(tableNum(ForecastSales));

        inventSiteDimensionLinkValidationTmp.fpfsModelId                    = _forecastSales.ModelId;
        inventSiteDimensionLinkValidationTmp.fpfsItemId                     = _forecastSales.ItemId;
        inventSiteDimensionLinkValidationTmp.fpfsStartDate                  = _forecastSales.StartDate;
        inventSiteDimensionLinkValidationTmp.fssqlSalesQty                  = _forecastSales.SalesQty;
        inventSiteDimensionLinkValidationTmp.fpfspbsmasolPurchSalesUnitId   = _forecastSales.SalesUnitId;
        inventSiteDimensionLinkValidationTmp.fsslsqlSalesPrice              = _forecastSales.SalesPrice;
        inventSiteDimensionLinkValidationTmp.fpfsDiscAmount                 = _forecastSales.DiscAmount;
        inventSiteDimensionLinkValidationTmp.fpfsAmount                     = _forecastSales.Amount;
        inventSiteDimensionLinkValidationTmp.fpfsAllocateMethod             = _forecastSales.AllocateMethod;
        inventSiteDimensionLinkValidationTmp.fpfsFreq                       = _forecastSales.Freq;
        inventSiteDimensionLinkValidationTmp.fpfsFreqCode                   = _forecastSales.FreqCode;
        inventSiteDimensionLinkValidationTmp.fpfsEndDate                    = _forecastSales.EndDate;
        inventSiteDimensionLinkValidationTmp.fpfsKeyId                      = _forecastSales.KeyId;
        inventSiteDimensionLinkValidationTmp.fpfsItemAllocateId             = _forecastSales.ItemAllocateId;
        inventSiteDimensionLinkValidationTmp.fssqlCustAccountId             = _forecastSales.CustAccountId;
        inventSiteDimensionLinkValidationTmp.fsCustGroupId                  = _forecastSales.CustGroupId;

        inventSiteDimensionLinkValidationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts values from a record in the <c>InventJournalTrans</c> table into a temporary table.
    /// </summary>
    /// <param name="_inventJournalTrans">
    ///    A record in the <c>InventJournalTrans</c> table.
    /// </param>
    protected void insertInventJournalTrans(InventJournalTrans _inventJournalTrans)
    {
        this.setCommonNonIssueTempTableRecordValues(tableNum(InventJournalTrans));

        inventSiteDimensionLinkValidationTmp.ijtJournalId       = _inventJournalTrans.JournalId;
        inventSiteDimensionLinkValidationTmp.ijtprfqlsqlLineNum = _inventJournalTrans.LineNum;
        inventSiteDimensionLinkValidationTmp.ijtpjrVoucher      = _inventJournalTrans.Voucher;
        inventSiteDimensionLinkValidationTmp.ijtpjrTransDate    = _inventJournalTrans.TransDate;
        inventSiteDimensionLinkValidationTmp.ijtiqopbpjbItemId  = _inventJournalTrans.ItemId;
        inventSiteDimensionLinkValidationTmp.ijtQty             = _inventJournalTrans.Qty;
        inventSiteDimensionLinkValidationTmp.ijtCostAmount      = _inventJournalTrans.CostAmount;

        inventSiteDimensionLinkValidationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventNonConformanceTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts values from a record in the <c>InventNonConformanceTable</c> table into a temporary table.
    /// </summary>
    /// <param name="_inventNonConformanceTable">
    ///    A record in the <c>InventNonConformanceTable</c> table.
    /// </param>
    protected void insertInventNonConformanceTable(InventNonConformanceTable _inventNonConformanceTable)
    {
        this.setCommonNonIssueTempTableRecordValues(tableNum(InventNonConformanceTable));

        inventSiteDimensionLinkValidationTmp.incNonConformanceId        = _inventNonConformanceTable.InventNonConformanceID;
        inventSiteDimensionLinkValidationTmp.incNonConformanceDate      = _inventNonConformanceTable.NonConformanceDate;
        inventSiteDimensionLinkValidationTmp.incProblemTypeId           = _inventNonConformanceTable.InventTestProblemTypeId;
        inventSiteDimensionLinkValidationTmp.incNonConformanceType      = _inventNonConformanceTable.InventNonConformanceType;
        inventSiteDimensionLinkValidationTmp.incNonConformanceApproval  = _inventNonConformanceTable.InventNonConformanceApproval;
        inventSiteDimensionLinkValidationTmp.incItemId                  = _inventNonConformanceTable.ItemId;
        inventSiteDimensionLinkValidationTmp.incTestDefectQty           = _inventNonConformanceTable.TestDefectQty;
        inventSiteDimensionLinkValidationTmp.incUnitOfMeasureSymbol     = _inventNonConformanceTable.UnitId;

        inventSiteDimensionLinkValidationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventQualityOrderTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts values from a record in the <c>InventQualityOrderTable</c> table into a temporary table.
    /// </summary>
    /// <param name="_inventQualityOrderTable">
    ///    A record in the <c>InventQualityOrderTable</c> table.
    /// </param>
    protected void insertInventQualityOrderTable(InventQualityOrderTable _inventQualityOrderTable)
    {
        this.setCommonNonIssueTempTableRecordValues(tableNum(InventQualityOrderTable));

        inventSiteDimensionLinkValidationTmp.iQualOQualityOrderId   = _inventQualityOrderTable.QualityOrderId;
        inventSiteDimensionLinkValidationTmp.iQualOItemId           = _inventQualityOrderTable.ItemId;
        inventSiteDimensionLinkValidationTmp.iQualOTestGroupId      = _inventQualityOrderTable.TestGroupId;
        inventSiteDimensionLinkValidationTmp.iQualOReferenceType    = _inventQualityOrderTable.ReferenceType;
        inventSiteDimensionLinkValidationTmp.iQualOQualityOrderQty  = _inventQualityOrderTable.Qty;

        inventSiteDimensionLinkValidationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventQuarantineOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts values from a record in the <c>InventQuarantineOrder</c> table into a temporary table.
    /// </summary>
    /// <param name="_inventQuarantineOrder">
    ///    A record in the <c>InventQuarantineOrder</c> table.
    /// </param>
    protected void insertInventQuarantineOrder(InventQuarantineOrder _inventQuarantineOrder)
    {
        this.setCommonNonIssueTempTableRecordValues(tableNum(InventQuarantineOrder));

        inventSiteDimensionLinkValidationTmp.iqoQuarantineId                = _inventQuarantineOrder.QuarantineId;
        inventSiteDimensionLinkValidationTmp.ijtiqopbpjbItemId              = _inventQuarantineOrder.ItemId;
        inventSiteDimensionLinkValidationTmp.iqopjbQuarantineDateTransDate  = _inventQuarantineOrder.QuarantineDate;
        inventSiteDimensionLinkValidationTmp.iqoStatus                      = _inventQuarantineOrder.Status;
        inventSiteDimensionLinkValidationTmp.iqoprfqlQty                    = _inventQuarantineOrder.Qty;
        inventSiteDimensionLinkValidationTmp.iqoRemainQty                   = _inventQuarantineOrder.RemainQty;

        inventSiteDimensionLinkValidationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIssueCountRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a record into a temporary table that has the number of issues found for the specified table.
    /// </summary>
    /// <param name="_tableId">
    ///    A table ID.
    /// </param>
    protected void insertIssueCountRecord(TableId _tableId)
    {
        this.setCommonTempTableRecordValues(_tableId);
        inventSiteDimensionLinkValidationTmp.IsIssueCount   = NoYes::Yes;
        inventSiteDimensionLinkValidationTmp.IssuesStr      = strFmt("@SYS111434", recordCount);
        inventSiteDimensionLinkValidationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProdBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts values from a record in the <c>ProdBOM</c> table into a temporary table.
    /// </summary>
    /// <param name="_prodBOM">
    ///    A record in the <c>ProdBOM</c> table.
    /// </param>
    protected void insertProdBOM(ProdBOM _prodBOM)
    {
        this.setCommonNonIssueTempTableRecordValues(tableNum(ProdBOM));

        inventSiteDimensionLinkValidationTmp.pbprpjbpjrptProdId             = _prodBOM.ProdId;
        inventSiteDimensionLinkValidationTmp.ijtiqopbpjbItemId              = _prodBOM.ItemId;
        inventSiteDimensionLinkValidationTmp.fpfspbsmasolPurchSalesUnitId   = _prodBOM.UnitId;
        inventSiteDimensionLinkValidationTmp.pbQtyBOMCalc                   = _prodBOM.QtyBOMCalc;
        inventSiteDimensionLinkValidationTmp.pbbomQty                       = _prodBOM.bomQty;
        inventSiteDimensionLinkValidationTmp.pbbomQtySerie                  = _prodBOM.bomQtySerie;
        inventSiteDimensionLinkValidationTmp.pbRemainBOMPhysical            = _prodBOM.RemainBOMPhysical;
        inventSiteDimensionLinkValidationTmp.pbQtyBOMStUp                   = _prodBOM.QtyBOMStUp;
        inventSiteDimensionLinkValidationTmp.pbRemainBOMfinancial           = _prodBOM.RemainBOMFinancial;

        inventSiteDimensionLinkValidationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProdJournalBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts values from a record in the <c>ProdJournalBOM</c> table into a temporary table.
    /// </summary>
    /// <param name="_prodJournalBOM">
    ///    A record in the <c>ProdJournalBOM</c> table.
    /// </param>
    protected void insertProdJournalBOM(ProdJournalBOM _prodJournalBOM)
    {
        this.setCommonNonIssueTempTableRecordValues(tableNum(ProdJournalBOM));

        inventSiteDimensionLinkValidationTmp.pjbJournalId                   = _prodJournalBOM.JournalId;
        inventSiteDimensionLinkValidationTmp.pjbVoucher                     = _prodJournalBOM.Voucher;
        inventSiteDimensionLinkValidationTmp.iqopjbQuarantineDateTransDate  = _prodJournalBOM.TransDate;
        inventSiteDimensionLinkValidationTmp.pbprpjbpjrptProdId             = _prodJournalBOM.ProdId;
        inventSiteDimensionLinkValidationTmp.ijtiqopbpjbItemId              = _prodJournalBOM.ItemId;
        inventSiteDimensionLinkValidationTmp.pjbBomConsump                  = _prodJournalBOM.bomConsump;
        inventSiteDimensionLinkValidationTmp.pjBendConsump                  = _prodJournalBOM.EndConsump;

        inventSiteDimensionLinkValidationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProdJournalRoute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts values from a record in the <c>ProdJournalRoute</c> table into a temporary table.
    /// </summary>
    /// <param name="_prodJournalRoute">
    ///    A record in the <c>ProdJournalRoute</c> table.
    /// </param>
    protected void insertProdJournalRoute(ProdJournalRoute _prodJournalRoute)
    {
        this.setCommonNonIssueTempTableRecordValues(tableNum(ProdJournalRoute));

        inventSiteDimensionLinkValidationTmp.pjrJournalId       = _prodJournalRoute.JournalId;
        inventSiteDimensionLinkValidationTmp.ijtpjrVoucher      = _prodJournalRoute.Voucher;
        inventSiteDimensionLinkValidationTmp.ijtpjrTransDate    = _prodJournalRoute.TransDate;
        inventSiteDimensionLinkValidationTmp.pbprpjbpjrptProdId = _prodJournalRoute.ProdId;
        inventSiteDimensionLinkValidationTmp.prpjrOprNum        = _prodJournalRoute.OprNum;
        inventSiteDimensionLinkValidationTmp.pjrWrkCtrId        = _prodJournalRoute.WrkCtrId;
        inventSiteDimensionLinkValidationTmp.pjrsmaalEmplId     = _prodJournalRoute.Worker;
        inventSiteDimensionLinkValidationTmp.pjrHours           = _prodJournalRoute.Hours;
        inventSiteDimensionLinkValidationTmp.pjrQtyError        = _prodJournalRoute.QtyError;
        inventSiteDimensionLinkValidationTmp.pjrQtyGood         = _prodJournalRoute.QtyGood;
        inventSiteDimensionLinkValidationTmp.prpjrOprFinished   = _prodJournalRoute.OprFinished;

        inventSiteDimensionLinkValidationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProdRoute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts values from a record in the <c>ProdRoute</c> table into a temporary table.
    /// </summary>
    /// <param name="_prodRoute">
    ///    A record in the <c>ProdRoute</c> table.
    /// </param>
    protected void insertProdRoute(ProdRoute _prodRoute)
    {
        this.setCommonNonIssueTempTableRecordValues(tableNum(ProdRoute));

        inventSiteDimensionLinkValidationTmp.pbprpjbpjrptProdId = _prodRoute.ProdId;
        inventSiteDimensionLinkValidationTmp.prpjrOprNum        = _prodRoute.OprNum;
        inventSiteDimensionLinkValidationTmp.prOprPriority      = _prodRoute.OprPriority;
        inventSiteDimensionLinkValidationTmp.prOprId            = _prodRoute.OprId;
        inventSiteDimensionLinkValidationTmp.prSetupTime        = _prodRoute.SetupTime;
        inventSiteDimensionLinkValidationTmp.prProcessTime      = _prodRoute.ProcessTime;
        inventSiteDimensionLinkValidationTmp.prFromDate         = _prodRoute.FromDate;
        inventSiteDimensionLinkValidationTmp.prFromTime         = _prodRoute.FromTime;
        inventSiteDimensionLinkValidationTmp.prToDate           = _prodRoute.ToDate;
        inventSiteDimensionLinkValidationTmp.prToTime           = _prodRoute.ToTime;
        inventSiteDimensionLinkValidationTmp.prpjrOprFinished   = _prodRoute.OprFinished;

        inventSiteDimensionLinkValidationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts values from a record in the <c>ProdTable</c> table into a temporary table.
    /// </summary>
    /// <param name="_prodTable">
    ///    A record in the <c>ProdTable</c> table.
    /// </param>
    protected void insertProdTable(ProdTable _prodTable)
    {
        this.setCommonNonIssueTempTableRecordValues(tableNum(ProdTable));

        inventSiteDimensionLinkValidationTmp.pbprpjbpjrptProdId         = _prodTable.ProdId;
        inventSiteDimensionLinkValidationTmp.ptItemId                   = _prodTable.ItemId;
        inventSiteDimensionLinkValidationTmp.ptName                     = _prodTable.Name;
        inventSiteDimensionLinkValidationTmp.ptProdStatus               = _prodTable.ProdStatus;
        inventSiteDimensionLinkValidationTmp.ptBackOrderStatus          = _prodTable.BackorderStatus;
        inventSiteDimensionLinkValidationTmp.ptQtySched                 = _prodTable.QtySched;
        inventSiteDimensionLinkValidationTmp.ptQtyStUp                  = _prodTable.QtyStUp;
        inventSiteDimensionLinkValidationTmp.ptsqlDlvDateConfirmedDlv   = _prodTable.DlvDate;
        inventSiteDimensionLinkValidationTmp.ptSchedEnd                 = _prodTable.SchedEnd;

        inventSiteDimensionLinkValidationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts values from a record in the <c>PurchLine</c> table into a temporary table.
    /// </summary>
    /// <param name="_purchLine">
    ///    A record in the <c>PurchLine</c> table.
    /// </param>
    protected void insertPurchLine(PurchLine _purchLine)
    {
        this.setCommonNonIssueTempTableRecordValues(tableNum(PurchLine));

        inventSiteDimensionLinkValidationTmp.plPurchId                  = _purchLine.PurchId;
        inventSiteDimensionLinkValidationTmp.plprfqclprfqlslsqlItemId   = _purchLine.ItemId;
        inventSiteDimensionLinkValidationTmp.plprfqclPurchQty           = _purchLine.PurchQty;
        inventSiteDimensionLinkValidationTmp.fsslsqlSalesPrice          = _purchLine.PurchPrice;
        inventSiteDimensionLinkValidationTmp.plprfqclLineAmount         = _purchLine.LineAmount;
        inventSiteDimensionLinkValidationTmp.plCurrencyCode             = _purchLine.CurrencyCode;
        inventSiteDimensionLinkValidationTmp.plPurchStatus              = _purchLine.PurchStatus;

        inventSiteDimensionLinkValidationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPurchRFQCaseLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts values from a record in the <c>PurchRFQCaseLine</c> table into a temporary table.
    /// </summary>
    /// <param name="_purchRFQCaseLine">
    ///    A record in the <c>PurchRFQCaseLine</c> table.
    /// </param>
    protected void insertPurchRFQCaseLine(PurchRFQCaseLine _purchRFQCaseLine)
    {
        this.setCommonNonIssueTempTableRecordValues(tableNum(PurchRFQCaseLine));

        inventSiteDimensionLinkValidationTmp.prfqclrfqCaseId            = _purchRFQCaseLine.rfqCaseId;
        inventSiteDimensionLinkValidationTmp.plprfqclprfqlslsqlItemId   = _purchRFQCaseLine.ItemId;
        inventSiteDimensionLinkValidationTmp.plprfqclPurchQty           = _purchRFQCaseLine.PurchQty;
        inventSiteDimensionLinkValidationTmp.fpplprfqclPurchPrice       = _purchRFQCaseLine.PurchPrice;
        inventSiteDimensionLinkValidationTmp.plprfqclLineAmount         = _purchRFQCaseLine.LineAmount;
        inventSiteDimensionLinkValidationTmp.prfqclStatusLow            = _purchRFQCaseLine.StatusLow;

        inventSiteDimensionLinkValidationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPurchRFQLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts values from a record in the <c>PurchRFQLine</c> table into a temporary table.
    /// </summary>
    /// <param name="_purchRFQLine">
    ///    A record in the <c>PurchRFQLine</c> table.
    /// </param>
    protected void insertPurchRFQLine(PurchRFQLine _purchRFQLine)
    {
        this.setCommonNonIssueTempTableRecordValues(tableNum(PurchRFQLine));

        inventSiteDimensionLinkValidationTmp.prfqlrfqId                 = _purchRFQLine.rfqId;
        inventSiteDimensionLinkValidationTmp.prfqlLineType              = _purchRFQLine.LineType;
        inventSiteDimensionLinkValidationTmp.ijtprfqlsqlLineNum         = _purchRFQLine.LineNum;
        inventSiteDimensionLinkValidationTmp.plprfqclprfqlslsqlItemId   = _purchRFQLine.ItemId;
        inventSiteDimensionLinkValidationTmp.prfqlItemName              = _purchRFQLine.ItemName;
        inventSiteDimensionLinkValidationTmp.prfqlDeliveryDate          = _purchRFQLine.DeliveryDate;
        inventSiteDimensionLinkValidationTmp.prfqlPurchUnit             = _purchRFQLine.PurchUnit;
        inventSiteDimensionLinkValidationTmp.prfqlPriceUnit             = _purchRFQLine.PriceUnit;

        inventSiteDimensionLinkValidationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts values from a record in the <c>SalesLine</c> table into a temporary table.
    /// </summary>
    /// <param name="_salesLine">
    ///    A record in the <c>SalesLine</c> table.
    /// </param>
    protected void insertSalesLine(SalesLine _salesLine)
    {
        this.setCommonNonIssueTempTableRecordValues(tableNum(SalesLine));

        inventSiteDimensionLinkValidationTmp.slSalesId                  = _salesLine.SalesId;
        inventSiteDimensionLinkValidationTmp.plprfqclprfqlslsqlItemId   = _salesLine.ItemId;
        inventSiteDimensionLinkValidationTmp.slSalesQty                 = _salesLine.SalesQty;
        inventSiteDimensionLinkValidationTmp.fsslsqlSalesPrice          = _salesLine.SalesPrice;
        inventSiteDimensionLinkValidationTmp.slLineAmount               = _salesLine.LineAmount;
        inventSiteDimensionLinkValidationTmp.slsqlCurrencyCode          = _salesLine.CurrencyCode;
        inventSiteDimensionLinkValidationTmp.slSalesStatus              = _salesLine.SalesStatus;

        inventSiteDimensionLinkValidationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSalesQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts values from a record in the <c>SalesQuotationLine</c> table into a temporary table.
    /// </summary>
    /// <param name="_salesQuotationLine">
    ///    A record in the <c>SalesQuotationLine</c> table.
    /// </param>
    protected void insertSalesQuotationLine(SalesQuotationLine _salesQuotationLine)
    {
        this.setCommonNonIssueTempTableRecordValues(tableNum(SalesQuotationLine));

        inventSiteDimensionLinkValidationTmp.sqlQuotationId             = _salesQuotationLine.QuotationId;
        inventSiteDimensionLinkValidationTmp.ptsqlDlvDateConfirmedDlv   = _salesQuotationLine.ConfirmedDlv;
        inventSiteDimensionLinkValidationTmp.ijtprfqlsqlLineNum         = _salesQuotationLine.LineNum;
        inventSiteDimensionLinkValidationTmp.plprfqclprfqlslsqlItemId   = _salesQuotationLine.ItemId;
        inventSiteDimensionLinkValidationTmp.fssqlSalesQty              = _salesQuotationLine.SalesQty;
        inventSiteDimensionLinkValidationTmp.fsslsqlSalesPrice          = _salesQuotationLine.SalesPrice;
        inventSiteDimensionLinkValidationTmp.slsqlCurrencyCode          = _salesQuotationLine.CurrencyCode;
        inventSiteDimensionLinkValidationTmp.fssqlCustAccountId         = _salesQuotationLine.CustAccount;

        inventSiteDimensionLinkValidationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSMAAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts values from a record in the <c>SMAAgreementLine</c> table into a temporary table.
    /// </summary>
    /// <param name="_smaAgreementLine">
    ///    A record in the <c>SMAAgreementLine</c> table.
    /// </param>
    protected void insertSMAAgreementLine(SMAAgreementLine _smaAgreementLine)
    {
        this.setCommonNonIssueTempTableRecordValues(tableNum(SMAAgreementLine));

        inventSiteDimensionLinkValidationTmp.smaalAgreementId       = _smaAgreementLine.AgreementId;
        inventSiteDimensionLinkValidationTmp.smaalAgreemnetLineNum  = _smaAgreementLine.AgreementLineNum;
        inventSiteDimensionLinkValidationTmp.smaalDescription       = _smaAgreementLine.Description;
        inventSiteDimensionLinkValidationTmp.smaalTransactionType   = _smaAgreementLine.TransactionType;
        inventSiteDimensionLinkValidationTmp.smaalProjId            = _smaAgreementLine.ProjId;
        inventSiteDimensionLinkValidationTmp.smaalProjCategoryId    = _smaAgreementLine.ProjCategoryId;
        inventSiteDimensionLinkValidationTmp.smaalActivityNumber    = _smaAgreementLine.ActivityNumber;
        inventSiteDimensionLinkValidationTmp.pjrsmaalEmplId         = _smaAgreementLine.Worker;
        inventSiteDimensionLinkValidationTmp.smaalTimeAgreementId   = _smaAgreementLine.TimeAgreementId;
        inventSiteDimensionLinkValidationTmp.smaalIntervalId        = _smaAgreementLine.IntervalId;
        inventSiteDimensionLinkValidationTmp.smaalServiceObjectId   = _smaAgreementLine.ServiceObjectId;
        inventSiteDimensionLinkValidationTmp.smaalServiceTaskId     = _smaAgreementLine.ServiceTaskId;

        inventSiteDimensionLinkValidationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSMAServiceOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts values from a record in the <c>SMAServiceOrderLine</c> table into a temporary table.
    /// </summary>
    /// <param name="_smaServiceOrderLine">
    ///    A record in the <c>SMAServiceOrderLine</c> table.
    /// </param>
    protected void insertSMAServiceOrderLine(SMAServiceOrderLine _smaServiceOrderLine)
    {
        this.setCommonNonIssueTempTableRecordValues(tableNum(SMAServiceOrderLine));

        inventSiteDimensionLinkValidationTmp.smasolTransactionType          = _smaServiceOrderLine.TransactionType;
        inventSiteDimensionLinkValidationTmp.smasolServiceOrderId           = _smaServiceOrderLine.ServiceOrderId;
        inventSiteDimensionLinkValidationTmp.fpfspbsmasolPurchSalesUnitId   = _smaServiceOrderLine.Unit;

        inventSiteDimensionLinkValidationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printForecastPurch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets data for the <c>ForecastPurch</c> table.
    /// </summary>
    private void printForecastPurch()
    {
        ForecastPurch   forecastPurch;

        recordCount = 0;
        forecastPurch.recordLevelSecurity(true);

        if (listTransactions)
        {
            while select forecastPurch
                where forecastPurch.StartDate >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
                join TableId from inventDim
                where inventDim.InventDimId == forecastPurch.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(forecastPurch.DefaultDimension))
                {
                    recordCount++;
                    transDimensionValue = DimensionAttributeValue::getDisplayStringForAttributeValue(inventSite.dimensionAttributeValue());
                    this.insertForecastPurch(forecastPurch);
                }
            }
        }
        else
        {
            while select DefaultDimension from forecastPurch
                where forecastPurch.StartDate >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
                join TableId from inventDim
                where inventDim.InventDimId == forecastPurch.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(forecastPurch.DefaultDimension))
                {
                    recordCount++;
                }
            }
        }

        this.insertIssueCountRecord(tableNum(ForecastPurch));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printForecastSales</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets data for the <c>ForecastSales</c> table.
    /// </summary>
    private void printForecastSales()
    {
        ForecastSales   forecastSales;

        recordCount = 0;
        forecastSales.recordLevelSecurity(true);

        if (listTransactions)
        {
            while select forecastSales
                where forecastSales.StartDate >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
                join TableId from inventDim
                where inventDim.InventDimId == forecastSales.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(forecastSales.DefaultDimension))
                {
                    recordCount++;
                    transDimensionValue = DimensionAttributeValue::getDisplayStringForAttributeValue(inventSite.dimensionAttributeValue());
                    this.insertForecastSales(forecastSales);
                }
            }
        }
        else
        {
            while select DefaultDimension from forecastSales
                where forecastSales.StartDate >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
                join TableId from inventDim
                where inventDim.InventDimId == forecastSales.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(forecastSales.DefaultDimension))
                {
                    recordCount++;
                }
            }
        }

        this.insertIssueCountRecord(tableNum(ForecastSales));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printInventJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets data for the <c>InventJournalTrans</c> table.
    /// </summary>
    private void printInventJournalTrans()
    {
        InventJournalTable  inventJournalTable;
        InventJournalTrans  inventJournalTrans;

        recordCount = 0;
        inventJournalTrans.recordLevelSecurity(true);

        if (listTransactions)
        {
            while select inventJournalTrans
                join TableId from inventJournalTable
                where inventJournalTable.JournalId == inventJournalTrans.JournalId    &&
                      inventJournalTable.Posted    != NoYes::Yes
                join TableId from inventDim
                where inventDim.InventDimId == inventJournalTrans.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(inventJournalTrans.DefaultDimension))
                {
                    recordCount++;
                    transDimensionValue = DimensionAttributeValue::getDisplayStringForAttributeValue(inventSite.dimensionAttributeValue());
                    this.insertInventJournalTrans(inventJournalTrans);
                }
            }
        }
        else
        {
            while select DefaultDimension from inventJournalTrans
                join TableId from inventJournalTable
                where inventJournalTable.JournalId == inventJournalTrans.JournalId    &&
                      inventJournalTable.Posted    != NoYes::Yes
                join TableId from inventDim
                where inventDim.InventDimId == inventJournalTrans.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(inventJournalTrans.DefaultDimension))
                {
                    recordCount++;
                }
            }
        }

        this.insertIssueCountRecord(tableNum(InventJournalTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printInventNonConformanceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data for the <c>InventNonConformanceTable</c> table.
    /// </summary>
    private void printInventNonConformanceTable()
    {
        InventNonConformanceTable   inventNonConformanceTable;

        recordCount = 0;
        inventNonConformanceTable.recordLevelSecurity(true);

        if (listTransactions)
        {
            while select inventNonConformanceTable
                where inventNonConformanceTable.Closed == NoYes::No
                join TableId from inventDim
                where inventDim.InventDimId == inventNonConformanceTable.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(inventNonConformanceTable.DefaultDimension))
                {
                    recordCount++;
                    transDimensionValue = DimensionAttributeValue::getDisplayStringForAttributeValue(inventSite.dimensionAttributeValue());
                    this.insertInventNonConformanceTable(inventNonConformanceTable);
                }
            }
        }
        else
        {
            while select DefaultDimension from inventNonConformanceTable
                where inventNonConformanceTable.Closed == NoYes::No
                join TableId from inventDim
                where inventDim.InventDimId == inventNonConformanceTable.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(inventNonConformanceTable.DefaultDimension))
                {
                    recordCount++;
                }
            }
        }

        this.insertIssueCountRecord(tableNum(InventNonConformanceTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printInventQualityOrderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data for the <c>InventQualityOrderTable</c> table.
    /// </summary>
    private void printInventQualityOrderTable()
    {
        InventQualityOrderTable inventQualityOrderTable;

        recordCount = 0;
        inventQualityOrderTable.recordLevelSecurity(true);

        if (listTransactions)
        {
            while select inventQualityOrderTable
                where inventQualityOrderTable.OrderStatus == InventTestOrderStatus::Open
                join TableId from inventDim
                where inventDim.InventDimId == inventQualityOrderTable.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(inventQualityOrderTable.DefaultDimension))
                {
                    recordCount++;
                    transDimensionValue = DimensionAttributeValue::getDisplayStringForAttributeValue(inventSite.dimensionAttributeValue());
                    this.insertInventQualityOrderTable(inventQualityOrderTable);
                }
            }
        }
        else
        {
            while select DefaultDimension from inventQualityOrderTable
                where inventQualityOrderTable.OrderStatus == InventTestOrderStatus::Open
                join TableId from inventDim
                where inventDim.InventDimId == inventQualityOrderTable.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(inventQualityOrderTable.DefaultDimension))
                {
                    recordCount++;
                }
            }
        }

        this.insertIssueCountRecord(tableNum(InventQualityOrderTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printInventQuarantineOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets data for the <c>InventQuarantineOrder</c> table.
    /// </summary>
    private void printInventQuarantineOrder()
    {
        InventQuarantineOrder   inventQuarantineOrder;

        recordCount = 0;
        inventQuarantineOrder.recordLevelSecurity(true);

        if (listTransactions)
        {
            while select inventQuarantineOrder
                where inventQuarantineOrder.Status != InventQuarantineStatus::Ended
                join TableId from inventDim
                where inventDim.InventDimId == inventQuarantineOrder.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(inventQuarantineOrder.DefaultDimension))
                {
                    recordCount++;
                    transDimensionValue = DimensionAttributeValue::getDisplayStringForAttributeValue(inventSite.dimensionAttributeValue());
                    this.insertInventQuarantineOrder(inventQuarantineOrder);
                }
            }
        }
        else
        {
            while select DefaultDimension from inventQuarantineOrder
                where inventQuarantineOrder.Status != InventQuarantineStatus::Ended
                join TableId from inventDim
                where inventDim.InventDimId == inventQuarantineOrder.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(inventQuarantineOrder.DefaultDimension))
                {
                    recordCount++;
                }
            }
        }

        this.insertIssueCountRecord(tableNum(InventQuarantineOrder));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printProdBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets data for the <c>ProdBOM</c> table.
    /// </summary>
    private void printProdBOM()
    {
        ProdTable   prodTable;
        ProdBOM     prodBOM;

        recordCount = 0;
        prodBOM.recordLevelSecurity(true);

        if (listTransactions)
        {
            while select prodBOM
                join TableId from prodTable
                where prodTable.ProdId == prodBOM.ProdId        &&
                      prodTable.ProdStatus != ProdStatus::Completed
                join TableId from inventDim
                where inventDim.InventDimId == prodBOM.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(prodBOM.DefaultDimension))
                {
                    recordCount++;
                    transDimensionValue = DimensionAttributeValue::getDisplayStringForAttributeValue(inventSite.dimensionAttributeValue());
                    this.insertProdBOM(prodBOM);
                }
            }
        }
        else
        {
            while select DefaultDimension from prodBOM
                join TableId from prodTable
                where prodTable.ProdId == prodBOM.ProdId        &&
                      prodTable.ProdStatus != ProdStatus::Completed
                join TableId from inventDim
                where inventDim.InventDimId == prodBOM.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(prodBOM.DefaultDimension))
                {
                    recordCount++;
                }
            }
        }

        this.insertIssueCountRecord(tableNum(ProdBOM));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printProdJournalBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets data for the <c>ProdJournalBOM</c> table.
    /// </summary>
    private void printProdJournalBOM()
    {
        ProdJournalTable    prodJournalTable;
        ProdJournalBOM      prodJournalBOM;

        recordCount = 0;
        prodJournalBOM.recordLevelSecurity(true);

        if (listTransactions)
        {
            while select prodJournalBOM
                join TableId from prodJournalTable
                where prodJournalTable.JournalId == prodJournalBOM.JournalId    &&
                      prodJournalTable.Posted    != NoYes::Yes
                join TableId from inventDim
                where inventDim.InventDimId == prodJournalBOM.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(prodJournalBOM.DefaultDimension))
                {
                    recordCount++;
                    transDimensionValue = DimensionAttributeValue::getDisplayStringForAttributeValue(inventSite.dimensionAttributeValue());
                    this.insertProdJournalBOM(prodJournalBOM);
                }
            }
        }
        else
        {
            while select DefaultDimension from prodJournalBOM
                join TableId from prodJournalTable
                where prodJournalTable.JournalId == prodJournalBOM.JournalId    &&
                      prodJournalTable.Posted    != NoYes::Yes
                join TableId from inventDim
                where inventDim.InventDimId == prodJournalBOM.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(prodJournalBOM.DefaultDimension))
                {
                    recordCount++;
                }
            }
        }

        this.insertIssueCountRecord(tableNum(ProdJournalBOM));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printProdJournalRoute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets data for the <c>ProdJournalRoute</c> table.
    /// </summary>
    private void printProdJournalRoute()
    {
        ProdTable           prodTable;
        ProdJournalTable    prodJournalTable;
        ProdJournalRoute    prodJournalRoute;

        recordCount = 0;
        prodJournalRoute.recordLevelSecurity(true);

        if (listTransactions)
        {
            while select prodJournalRoute
                join TableId from prodJournalTable
                where prodJournalTable.JournalId == prodJournalRoute.JournalId    &&
                      prodJournalTable.Posted    != NoYes::Yes
                join TableId from prodTable
                where prodTable.ProdId  == prodJournalRoute.ProdId
                join InventSiteId from inventDim
                where inventDim.InventDimId == prodTable.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(prodJournalRoute.DefaultDimension))
                {
                    recordCount++;
                    transDimensionValue = DimensionAttributeValue::getDisplayStringForAttributeValue(inventSite.dimensionAttributeValue());
                    this.insertProdJournalRoute(prodJournalRoute);
                }
            }
        }
        else
        {
            while select DefaultDimension from prodJournalRoute
                exists join prodJournalTable
                where prodJournalTable.JournalId == prodJournalRoute.JournalId    &&
                      prodJournalTable.Posted    != NoYes::Yes
                join TableId from prodTable
                where prodTable.ProdId == prodJournalTable.ProdId
                join TableId from inventDim
                where inventDim.InventDimId == prodTable.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(prodJournalRoute.DefaultDimension))
                {
                    recordCount++;
                }
            }
        }

        this.insertIssueCountRecord(tableNum(ProdJournalRoute));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printProdRoute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets data for the <c>ProdRoute</c> table.
    /// </summary>
    private void printProdRoute()
    {
        ProdTable   prodTable;
        ProdRoute   prodRoute;

        recordCount = 0;
        prodRoute.recordLevelSecurity(true);

        if (listTransactions)
        {
            while select prodRoute
                join TableId from prodTable
                where prodTable.ProdId == prodRoute.ProdId        &&
                      prodTable.ProdStatus != ProdStatus::Completed
                join TableId from inventDim
                where inventDim.InventDimId == prodTable.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(prodRoute.DefaultDimension))
                {
                    recordCount++;
                    transDimensionValue = DimensionAttributeValue::getDisplayStringForAttributeValue(inventSite.dimensionAttributeValue());
                    this.insertProdRoute(prodRoute);
                }
            }
        }
        else
        {
            while select DefaultDimension from prodRoute
                join TableId from prodTable
                where prodTable.ProdId == prodRoute.ProdId        &&
                      prodTable.ProdStatus != ProdStatus::Completed
                join TableId from inventDim
                where inventDim.InventDimId == prodTable.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(prodRoute.DefaultDimension))
                {
                    recordCount++;
                }
            }
        }

        this.insertIssueCountRecord(tableNum(ProdRoute));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets data for the <c>ProdTable</c> table.
    /// </summary>
    private void printProdTable()
    {
        ProdTable   prodTable;

        recordCount = 0;
        prodTable.recordLevelSecurity(true);

        if (listTransactions)
        {
            while select prodTable
                where prodTable.ProdStatus != ProdStatus::Completed
                join TableId from inventDim
                where inventDim.InventDimId == prodTable.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(prodTable.DefaultDimension))
                {
                    recordCount++;
                    transDimensionValue = DimensionAttributeValue::getDisplayStringForAttributeValue(inventSite.dimensionAttributeValue());
                    this.insertProdTable(prodTable);
                }
            }
        }
        else
        {
            while select DefaultDimension from prodTable
                where prodTable.ProdStatus != ProdStatus::Completed
                join TableId from inventDim
                where inventDim.InventDimId == prodTable.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(prodTable.DefaultDimension))
                {
                    recordCount++;
                }
            }
        }

        this.insertIssueCountRecord(tableNum(ProdTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets data for the <c>PurchLine</c> table.
    /// </summary>
    private void printPurchLine()
    {
        PurchLine   purchLine;

        recordCount = 0;
        purchLine.recordLevelSecurity(true);

        if (listTransactions)
        {
            while select purchLine
                where purchLine.PurchStatus != PurchStatus::Invoiced &&
                      purchLine.PurchStatus != PurchStatus::Canceled &&
                     !purchLine.IsDeleted
                join TableId from inventDim
                where inventDim.InventDimId == purchLine.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(purchLine.DefaultDimension))
                {
                    recordCount++;
                    transDimensionValue = DimensionAttributeValue::getDisplayStringForAttributeValue(inventSite.dimensionAttributeValue());
                    this.insertPurchLine(purchLine);
                }
            }
        }
        else
        {
            while select DefaultDimension from purchLine
                where purchLine.PurchStatus != PurchStatus::Invoiced &&
                      purchLine.PurchStatus != PurchStatus::Canceled &&
                     !purchLine.IsDeleted
                join TableId from inventDim
                where inventDim.InventDimId == purchLine.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(purchLine.DefaultDimension))
                {
                    recordCount++;
                }
            }
        }

        this.insertIssueCountRecord(tableNum(PurchLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPurchRFQCaseLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets data for the <c>PurchRFQCaseLine</c> table.
    /// </summary>
    private void printPurchRFQCaseLine()
    {
        PurchRFQCaseLine    purchRFQCaseLine;

        recordCount = 0;
        purchRFQCaseLine.recordLevelSecurity(true);

        if (listTransactions)
        {
            while select purchRFQCaseLine
                where purchRFQCaseLine.StatusHigh != PurchRFQStatus::Accepted &&
                      purchRFQCaseLine.StatusHigh != PurchRFQStatus::Rejected &&
                      purchRFQCaseLine.StatusHigh != PurchRFQStatus::Canceled &&
                      purchRFQCaseLine.StatusLow  != PurchRFQStatus::Accepted &&
                      purchRFQCaseLine.StatusLow  != PurchRFQStatus::Rejected &&
                      purchRFQCaseLine.StatusLow  != PurchRFQStatus::Canceled
                join TableId from inventDim
                where inventDim.InventDimId == purchRFQCaseLine.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(purchRFQCaseLine.DefaultDimension))
                {
                    recordCount++;
                    transDimensionValue = DimensionAttributeValue::getDisplayStringForAttributeValue(inventSite.dimensionAttributeValue());
                    this.insertPurchRFQCaseLine(purchRFQCaseLine);
                }
            }
        }
        else
        {
            while select DefaultDimension from purchRFQCaseLine
                where purchRFQCaseLine.StatusHigh != PurchRFQStatus::Accepted &&
                      purchRFQCaseLine.StatusHigh != PurchRFQStatus::Rejected &&
                      purchRFQCaseLine.StatusHigh != PurchRFQStatus::Canceled &&
                      purchRFQCaseLine.StatusLow  != PurchRFQStatus::Accepted &&
                      purchRFQCaseLine.StatusLow  != PurchRFQStatus::Rejected &&
                      purchRFQCaseLine.StatusLow  != PurchRFQStatus::Canceled
                join TableId from inventDim
                where inventDim.InventDimId == purchRFQCaseLine.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(purchRFQCaseLine.DefaultDimension))
                {
                    recordCount++;
                }
            }
        }

        this.insertIssueCountRecord(tableNum(PurchRFQCaseLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPurchRFQLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets data for the <c>PurchRFQLine</c> table.
    /// </summary>
    private void printPurchRFQLine()
    {
        PurchRFQLine    purchRFQLine;

        recordCount = 0;
        purchRFQLine.recordLevelSecurity(true);

        if (listTransactions)
        {
            while select purchRFQLine
                where purchRFQLine.Status   != PurchRFQStatus::Accepted &&
                      purchRFQLine.Status   != PurchRFQStatus::Rejected &&
                      purchRFQLine.Status   != PurchRFQStatus::Canceled
                join TableId from inventDim
                where inventDim.InventDimId == purchRFQLine.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(purchRFQLine.DefaultDimension))
                {
                    recordCount++;
                    transDimensionValue = DimensionAttributeValue::getDisplayStringForAttributeValue(inventSite.dimensionAttributeValue());
                    this.insertPurchRFQLine(purchRFQLine);
                }
            }
        }
        else
        {
            while select DefaultDimension from purchRFQLine
                where purchRFQLine.Status   != PurchRFQStatus::Accepted &&
                      purchRFQLine.Status   != PurchRFQStatus::Rejected &&
                      purchRFQLine.Status   != PurchRFQStatus::Canceled
                join TableId from inventDim
                where inventDim.InventDimId == purchRFQLine.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(purchRFQLine.DefaultDimension))
                {
                    recordCount++;
                }
            }
        }

        this.insertIssueCountRecord(tableNum(PurchRFQLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets data for the <c>SalesLine</c> table.
    /// </summary>
    private void printSalesLine()
    {
        SalesLine   salesLine;

        recordCount = 0;
        salesLine.recordLevelSecurity(true);

        if (listTransactions)
        {
            while select salesLine
                where salesLine.SalesStatus == SalesStatus::None
                    || salesLine.SalesStatus == SalesStatus::Backorder
                    || salesLine.SalesStatus == SalesStatus::Delivered
                join TableId from inventDim
                    where inventDim.InventDimId == salesLine.InventDimId
                join inventSite
                    where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(salesLine.DefaultDimension))
                {
                    recordCount++;
                    transDimensionValue = DimensionAttributeValue::getDisplayStringForAttributeValue(inventSite.dimensionAttributeValue());
                    this.insertSalesLine(salesLine);
                }
            }
        }
        else
        {
            while select DefaultDimension from salesLine
                where salesLine.SalesStatus == SalesStatus::None
                    || salesLine.SalesStatus == SalesStatus::Backorder
                    || salesLine.SalesStatus == SalesStatus::Delivered
                join TableId from inventDim
                    where inventDim.InventDimId == salesLine.InventDimId
                join inventSite
                    where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(salesLine.DefaultDimension))
                {
                    recordCount++;
                }
            }
        }

        this.insertIssueCountRecord(tableNum(SalesLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSalesQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets data for the <c>SalesQuotationLine</c> table.
    /// </summary>
    private void printSalesQuotationLine()
    {
        SalesQuotationLine  salesQuotationLine;

        recordCount = 0;
        salesQuotationLine.recordLevelSecurity(true);

        if (listTransactions)
        {
            while select salesQuotationLine
                where salesQuotationLine.QuotationStatus != SalesQuotationStatus::Cancelled &&
                      salesQuotationLine.QuotationStatus != SalesQuotationStatus::Lost      &&
                      salesQuotationLine.QuotationStatus != SalesQuotationStatus::Confirmed
                join TableId from inventDim
                where inventDim.InventDimId == salesQuotationLine.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(salesQuotationLine.DefaultDimension))
                {
                    recordCount++;
                    transDimensionValue = DimensionAttributeValue::getDisplayStringForAttributeValue(inventSite.dimensionAttributeValue());
                    this.insertSalesQuotationLine(salesQuotationLine);
                }
            }
        }
        else
        {
            while select DefaultDimension from salesQuotationLine
                where salesQuotationLine.QuotationStatus != SalesQuotationStatus::Cancelled &&
                      salesQuotationLine.QuotationStatus != SalesQuotationStatus::Lost      &&
                      salesQuotationLine.QuotationStatus != SalesQuotationStatus::Confirmed
                join TableId from inventDim
                where inventDim.InventDimId == salesQuotationLine.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(salesQuotationLine.DefaultDimension))
                {
                    recordCount++;
                }
            }
        }

        this.insertIssueCountRecord(tableNum(SalesQuotationLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSMAAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets data for the <c>SMAAgreementLine</c> table.
    /// </summary>
    private void printSMAAgreementLine()
    {
        SMAAgreementLine    smaAgreementLine;

        recordCount = 0;
        smaAgreementLine.recordLevelSecurity(true);

        if (listTransactions)
        {
            while select smaAgreementLine
                where smaAgreementLine.TransactionType == SMATransactionType::Item  &&
                      smaAgreementLine.Suspended != NoYes::Yes                      &&
                      (!smaAgreementLine.EndDate || smaAgreementLine.EndDate >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                join TableId from inventDim
                where inventDim.InventDimId == smaAgreementLine.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(smaAgreementLine.DefaultDimension))
                {
                    recordCount++;
                    transDimensionValue = DimensionAttributeValue::getDisplayStringForAttributeValue(inventSite.dimensionAttributeValue());
                    this.insertSMAAgreementLine(smaAgreementLine);
                }
            }
        }
        else
        {
            while select DefaultDimension from smaAgreementLine
                where smaAgreementLine.TransactionType == SMATransactionType::Item  &&
                      smaAgreementLine.Suspended != NoYes::Yes                      &&
                      (!smaAgreementLine.EndDate || smaAgreementLine.EndDate >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                join TableId from inventDim
                where inventDim.InventDimId == smaAgreementLine.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(smaAgreementLine.DefaultDimension))
                {
                    recordCount++;
                }
            }
        }

        this.insertIssueCountRecord(tableNum(SMAAgreementLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSMAServiceOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets data for the <c>SMAServiceOrderLine</c> table.
    /// </summary>
    private void printSMAServiceOrderLine()
    {
        SMAServiceOrderLine smaServiceOrderLine;

        recordCount = 0;
        smaServiceOrderLine.recordLevelSecurity(true);

        if (listTransactions)
        {
            while select smaServiceOrderLine
                where smaServiceOrderLine.TransactionType == SMATransactionType::Item           &&
                      smaServiceOrderLine.ServiceOrderStatus != SMAServiceOrderStatus::Canceled &&
                      smaServiceOrderLine.ServiceOrderStatus != SMAServiceOrderStatus::Posted
                join TableId from inventDim
                where inventDim.InventDimId == smaServiceOrderLine.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(smaServiceOrderLine.DefaultDimension))
                {
                    recordCount++;
                    transDimensionValue = DimensionAttributeValue::getDisplayStringForAttributeValue(inventSite.dimensionAttributeValue());
                    this.insertSMAServiceOrderLine(smaServiceOrderLine);
                }
            }
        }
        else
        {
            while select DefaultDimension from smaServiceOrderLine
                where smaServiceOrderLine.TransactionType == SMATransactionType::Item           &&
                      smaServiceOrderLine.ServiceOrderStatus != SMAServiceOrderStatus::Canceled &&
                      smaServiceOrderLine.ServiceOrderStatus != SMAServiceOrderStatus::Posted
                join TableId from inventDim
                where inventDim.InventDimId == smaServiceOrderLine.InventDimId
                join inventSite
                where inventSite.SiteId == inventDim.InventSiteId
            {
                if (!inventSite.siteDimensionEquals(smaServiceOrderLine.DefaultDimension))
                {
                    recordCount++;
                }
            }
        }

        this.insertIssueCountRecord(tableNum(SMAServiceOrderLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic and also calls helper methods and inserts data in the temporary
    ///    table.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic. This method will be called by SSRS at
    ///    runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        InventSiteDimLinkValidContract inventSiteDimLinkValidContract = this.parmDataContract() as InventSiteDimLinkValidContract;

        listTransactions            =   inventSiteDimLinkValidContract.parmListTransaction();
        inventParameters            =   InventParameters::find();

        this.printForecastPurch();
        this.printForecastSales();
        this.printInventJournalTrans();
        this.printInventNonConformanceTable();
        this.printInventQualityOrderTable();
        this.printInventQuarantineOrder();
        this.printProdBOM();
        this.printProdRoute();
        this.printProdJournalBOM();
        this.printProdJournalRoute();
        this.printProdTable();
        this.printPurchLine();
        this.printPurchRFQCaseLine();
        this.printPurchRFQLine();
        this.printSalesLine();
        this.printSalesQuotationLine();
        this.printSMAAgreementLine();
        this.printSMAServiceOrderLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCommonNonIssueTempTableRecordValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets common attributes on a non-issue count record in a temporary table for the specified table.
    /// </summary>
    /// <param name="_tableId">
    ///    A table ID.
    /// </param>
    protected void setCommonNonIssueTempTableRecordValues(TableId _tableId)
    {
        this.setCommonTempTableRecordValues(_tableId);
        inventSiteDimensionLinkValidationTmp.IsIssueCount = NoYes::No;

        inventSiteDimensionLinkValidationTmp.DimensionAttributeName       = "@SYS135846";
        inventSiteDimensionLinkValidationTmp.AllDimension                 = transDimensionValue;
        inventSiteDimensionLinkValidationTmp.AllInventSiteId              = inventSite.SiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCommonTempTableRecordValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets common attributes on a record in a temporary table for the specified table.
    /// </summary>
    /// <param name="_tableId">
    ///    A table ID.
    /// </param>
    protected void setCommonTempTableRecordValues(TableId _tableId)
    {
        //Clear any previous data
        inventSiteDimensionLinkValidationTmp.clear();

        inventSiteDimensionLinkValidationTmp.RecordCount    = recordCount;
        // Table name to be used in filter range on the report
        inventSiteDimensionLinkValidationTmp.TableName      = tableId2name(_tableId);
        // Localizable table name to be shown in report
        inventSiteDimensionLinkValidationTmp.TableLabel     = tableId2pname(_tableId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>